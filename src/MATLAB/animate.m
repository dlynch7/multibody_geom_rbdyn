%% animate.m
%
% Description:
%   This function produces an animation based on a series of configuration
%   matrices Twb{k} corresponding to evenly-spaced times t(k).
%
% Inputs:
%   Twb_list: a cell array of Twb, the configuration of all bodies' CoM
%        frames {b(i)} (i = 1 to N) relative to the world frame {w}, 
%        each represented as a 4x4 homogeneous transformation matrix, i.e., 
%        an element of SE(3).
%   t_list: an array of evenly-spaced times corresponding to each entry in
%        Twb_list.
%   params: a struct with many fields, generated by calling init_params().
%   options (optional): a struct with the following fields:
%       options.trace_CoM = [true, false (default)]; if options.trace_CoM =
%       true, then the CoM trajectory is overlaid on top of the animation,
%       and the appearance of the CoM trajectory can be specified through
%       the "params" input argument (see above)
%       options.record_video = [true, false (default)]
%
% Outputs:
%   none

function animate(Twb_list,t_list,params,varargin)
%% Handle/parse optional inputs
if numel(varargin) > 0
    options = varargin{1,1};
    if (isfield(options,'trace_CoM') ...
        && ((options.trace_CoM == true) || (options.trace_CoM == false)))
        trace_CoM = options.trace_CoM;
    else
        trace_CoM = false;
    end
    
    if (isfield(options,'record_video') ...
        && ((options.record_video == true) || (options.record_video == false)))
        record_video = options.record_video;
        video_name = options.video_name;
    else
        record_video = false;
    end
end

%% Get the number of bodies in the simulation
num_bodies = numel(params.bodies);

%% Compute outer bounds on plot size
% extract minima and maxima of CoM position in {w} from Twb_list:
Twb_mat = reshape(cell2mat(Twb_list),[4*num_bodies,4,numel(t_list)]);
pwb_list = squeeze(Twb_mat(:,4,:));
xwb_min = min(min(pwb_list(1:4:end,:)));
xwb_max = max(max(pwb_list(1:4:end,:)));
ywb_min = min(min(pwb_list(2:4:end,:)));
ywb_max = max(max(pwb_list(2:4:end,:)));
zwb_min = min(min(pwb_list(3:4:end,:)));
zwb_max = max(max(pwb_list(3:4:end,:)));

semi_axis_max = zeros(1,num_bodies);

for n = 1:num_bodies
    switch params.bodies{n}.primitive
        case 'cylinder'
            semi_axis_max(n) = max([params.bodies{n}.geom.semi_axes.r,...
                                    params.bodies{n}.geom.semi_axes.h]);
        case 'ellipsoid'
            semi_axis_max(n) = max([params.bodies{n}.geom.semi_axes.x,...
                                    params.bodies{n}.geom.semi_axes.y,...
                                    params.bodies{n}.geom.semi_axes.z]);
        case 'rect-prism'
            semi_axis_max(n) = max([params.bodies{n}.geom.semi_axes.x,...
                                    params.bodies{n}.geom.semi_axes.y,...
                                    params.bodies{n}.geom.semi_axes.z]);
        otherwise
            error("Animation not implemented for 'primitive' = '%s'.",...
                params.bodies{n}.primitive)
    end
end

bounds3 = [xwb_min - params.viz.margin_scale*max(semi_axis_max),...
           xwb_max + params.viz.margin_scale*max(semi_axis_max),...
           ywb_min - params.viz.margin_scale*max(semi_axis_max),...
           ywb_max + params.viz.margin_scale*max(semi_axis_max),...
           zwb_min - params.viz.margin_scale*max(semi_axis_max),...
           zwb_max + params.viz.margin_scale*max(semi_axis_max)];
       
bounds3(5) = -0.5;

%% Animate by plotting frame-by-frame
fig = figure;
set(fig,'units','pixels','position',[0,0,1920,1080])
ax = gca;

if record_video
    v = VideoWriter(video_name);
    v.Quality = 100;
    open(v);
    pause(1);
end

dzh_pt_hist = NaN(4*num_bodies,numel(t_list));

for k = 1:numel(t_list)
    plot_ground(ax,bounds3,params);
    hold on
    for n = 1:num_bodies
        Twb_row_start = 1 + (n-1)*4;
        Twb_row_end = Twb_row_start + 3;
        switch params.bodies{n}.primitive
            case 'cylinder'
                plot_cylinder(ax,Twb_list{k}(Twb_row_start:Twb_row_end,:),...
                              params.bodies{n});
                dzh_pt_hist(Twb_row_start:Twb_row_end,k) ...
                    = Twb_list{k}(Twb_row_start:Twb_row_end,:)...
                    * [0;params.bodies{n}.geom.semi_axes.r;0;1];
                plot3(dzh_pt_hist(Twb_row_start,:),...
                      dzh_pt_hist(Twb_row_start + 1,:),...
                      dzh_pt_hist(Twb_row_start + 2,:),'k-')
            case 'ellipsoid'
                plot_ellipsoid(ax,Twb_list{k}(Twb_row_start:Twb_row_end,:),...
                               params.bodies{n});
                dzh_pt_hist(Twb_row_start:Twb_row_end,k) ...
                    = Twb_list{k}(Twb_row_start:Twb_row_end,:)...
                    * [0;params.bodies{n}.geom.semi_axes.y;0;1];
                plot3(dzh_pt_hist(Twb_row_start,:),...
                      dzh_pt_hist(Twb_row_start + 1,:),...
                      dzh_pt_hist(Twb_row_start + 2,:),'k-')
            case 'rect-prism'
                plot_rect_prism(ax,Twb_list{k}(Twb_row_start:Twb_row_end,:),...
                                params.bodies{n});
                dzh_pt_hist(Twb_row_start:Twb_row_end,k) ...
                    = Twb_list{k}(Twb_row_start:Twb_row_end,:)...
                    * [0;params.bodies{n}.geom.semi_axes.y;0;1];
                plot3(dzh_pt_hist(Twb_row_start,:),...
                      dzh_pt_hist(Twb_row_start + 1,:),...
                      dzh_pt_hist(Twb_row_start + 2,:),'k-')
            otherwise
                error("Animation not implemented for 'body_name' = '%s'.",params.body_name)
        end
        
        if trace_CoM
            plot3(squeeze(Twb_mat(Twb_row_start,4,1:k)),...
                  squeeze(Twb_mat(Twb_row_start + 1,4,1:k)),...
                  squeeze(Twb_mat(Twb_row_start + 2,4,1:k)),...
                'k-','LineWidth',3);
            hold on
        end
    end
    hold off
    
    axis equal
    axis(bounds3);
    view([135,30])
    xlabel('$x_\mathrm{w}$')
    ylabel('$y_\mathrm{w}$')
    zlabel('$z_\mathrm{w}$')
    drawnow;
    
    if record_video
        M(k) = getframe(fig);
        writeVideo(v,M(k));
    end
end

if record_video
    close(v);
end

end